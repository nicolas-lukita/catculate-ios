//
//  ESResultPage.swift
//  Catculate
//
//  Created by Nicolas Lukita on 2024/6/5.
//

import SwiftUI

struct ESResultPage: View {
    @Environment(\.colorScheme) var colorScheme
    
    let transactions: [Transaction];
    let numberOfPeople: Int;
    let individualTransactions: [IndividualTransactions]
    @Binding var path: NavigationPath
    
    var body: some View {
        let reverseColor = colorScheme == .dark ? Color.white : Color.black
        let totalAmount = transactions.reduce(0) { $0 + $1.amount }
        
        ZStack {
            ReceiptShape(
                topCornersRadius: 8, trianglesCornerRadius: 0, triangleHeight: 20, minTriangleWidth: 24)
            .fill(.clear)
            .stroke(reverseColor, lineWidth: 2)
            .padding(.bottom, 80)
            VStack {
                ScrollView(showsIndicators: false) {
                    VStack {
                        VStack {
                            Text("Receipt")
                                .font(.system(size: 40))
                                .fontWeight(.bold)
                            Text("Generated by: Catculate")
                                .font(.caption)
                        }
                        .padding(.top,10)
                        HStack {
                            Text("Transactions")
                                .fontWeight(.semibold)
                                .font(.system(size: 20))
                            Spacer()
                        }.padding(.top, 20)
                        Divider()
                        HStack {
                            Text("Item")
                                .fontWeight(.bold)
                            Spacer()
                            Text("Amount")
                                .fontWeight(.bold)
                        }.padding(.horizontal, 10)
                        ForEach(transactions, id:\.id) { transaction in
                            let transactionCount = individualTransactions.filter { $0.transactions.contains(transaction) }.count
                            VStack(alignment: .leading) {
                                HStack {
                                    HStack(spacing: 2) {
                                        Text("%")
                                            .font(.system(size: 8))
                                            .fontWeight(.semibold)
                                        Text(String(transactionCount))
                                            .font(.system(size: 16))
                                            .fontWeight(.bold)
                                    }
                                    .padding(.horizontal, 6)
                                    .padding(.vertical, 4)
                                    .background(.mint.opacity(0.3))
                                    .cornerRadius(6)
                                    Text("\(transaction.title)")
                                        .fontWeight(.medium)
                                    Spacer()
                                    
                                    HStack(spacing: 2) {
                                        Text("$")
                                            .fontWeight(.medium)
                                        Text("\(formatAmount(transaction.amount))")
                                            .fontWeight(.medium)
                                    }
                                    
                                }
                                if (transactionCount == 0) {
                                    Text("This transaction is not distributed!")
                                        .font(.system(size: 12))
                                        .foregroundStyle(.red)
                                } else {
                                    EmptyView()
                                }
                            }
                            .padding(.horizontal, 10)
                            .padding(.vertical, 10)
                            .frame(maxWidth: .infinity)
                            .background((transactionCount == 0) ? .red.opacity(0.2) : .clear)
                            .cornerRadius(8)
                        }
                        Divider()
                        HStack {
                            Text("Total")
                                .font(.system(size: 25))
                                .fontWeight(.bold)
                            Spacer().frame(height:10)
                            HStack(spacing: 2) {
                                Text("$")
                                    .font(.system(size: 25))
                                    .fontWeight(.semibold)
                                Text("\(formatAmount(totalAmount))")
                                    .font(.system(size: 25))
                                    .fontWeight(.semibold)
                            }
                        }
                        Divider()
                        HStack {
                            Text("Distributions")
                                .fontWeight(.semibold)
                                .font(.system(size: 20))
                            Spacer()
                        }.padding(.top, 30)
                        Divider()
                        ForEach(individualTransactions, id: \.id) { individualTransaction in
                            
                            HStack {
                                VStack(alignment: .leading, spacing: 4) {
                                    Text("Person \(individualTransaction.index+1)")
                                        .fontWeight(.bold)
                                    Divider()
                                    HStack {
                                        Text("Item")
                                            .fontWeight(.bold)
                                        Spacer()
                                        Text("Amount")
                                            .fontWeight(.bold)
                                    }
                                    ForEach(individualTransaction.transactions, id: \.id) { transaction in
                                        let sharedCount = countIndividualsWithTransaction(transaction: transaction)
                                        let amountPerPerson = transaction.amount / Double(sharedCount)
                                        HStack {
                                            Text("\(transaction.title)")
                                                .fontWeight(.medium)
                                            Spacer()
                                            Text("$\(formatAmount(amountPerPerson))")
                                                .fontWeight(.medium)
                                        }
                                    }
                                    Divider()
                                    HStack {
                                        Text("Total")
                                            .font(.system(size: 20))
                                            .fontWeight(.bold)
                                        Spacer().frame(height:10)
                                        HStack(spacing: 2) {
                                            Text("$")
                                                .font(.system(size: 20))
                                                .fontWeight(.bold)
                                            let individualTotal = individualTransaction.transactions.reduce(0) { sum, transaction in
                                                let sharedCount = countIndividualsWithTransaction(transaction: transaction)
                                                let amountPerPerson = transaction.amount / Double(sharedCount)
                                                return sum + amountPerPerson
                                            }
                                            Text("\(formatAmount(individualTotal))")
                                                .font(.system(size: 20))
                                                .fontWeight(.bold)
                                        }
                                    }
                                }
                                Spacer()
                            }
                            .padding(.horizontal, 20)
                            .padding(.vertical, 10)
                            .frame(maxWidth: .infinity)
                            .background(.gray.opacity(0.2))
                            .cornerRadius(8)
                        }
                    }
                }
                .padding()
                .padding(.bottom, 50)
                Spacer()
                Button(action: {
                    path = NavigationPath()
                }) {
                    CustomButton(title: "Done")
                }
            }
        }.padding()
    }
    private func countIndividualsWithTransaction(transaction: Transaction) -> Int {
        return individualTransactions.filter { $0.transactions.contains(transaction) }.count
    }
    
    private func calculateIndividualTotal(transactions: [Transaction], countIndividualsWithTransaction: (Transaction) -> Int) -> Double {
        var total: Double = 0.0
        for transaction in transactions {
            let sharedCount = countIndividualsWithTransaction(transaction)
            let amountPerPerson = transaction.amount / Double(sharedCount)
            total += amountPerPerson
        }
        return total
    }
    
}

#Preview {
    let tr1 = Transaction(title: "Amount", amount: 500.0)
    let tr2 = Transaction(title: "Surcharge", amount: 50.0)
    let transactions: [Transaction] = [
        tr1, tr2
    ]
    
    let individualTransactions: [IndividualTransactions] = [
        IndividualTransactions(index: 0, transactions: [
            tr1, tr2
        ]),
        IndividualTransactions(index: 1, transactions: [
            tr1, tr2
        ])
    ]
    
    return ESResultPage(transactions: transactions, numberOfPeople: 2, individualTransactions: individualTransactions, path: .constant(NavigationPath()))
    
}
